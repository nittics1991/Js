<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8"> 
<title></title>
</head>
<body>




<script>

(function() {

var Marche = Marche || {};


//不要?
/**
*   EventDispatcher
*/
class Marche.EventDispatcher {
    /**
    *   @var array
    */
    #listeners = []; 
    
    /**
    *   add
    *
    *   @param string name
    *   @param callable callback
    *   @return this
    */
    add(name, callback) {
        if(!this.listeners[name]) {
            this.listeners[name] = [];
        }
        
        this.$listeners[name].push(callback);
        return this;
    }
    
    /**
    *   remove
    *
    *   @param string name
    *   @param callable callback
    *   @return this
    */
    remove(name, callback) {
        if(!this.listeners[name]) {
            return this;
        }
        
        let that = this;
        this.$listeners[name].some(function(value, index) {
            if (value == callback) {
                that.listeners[name].splice(index, 1);
            }
        });
        return this;
    }
    
    /**
    *   dispatch
    *
    *   @param string name
    *   @param mixed event
    *   @return mixed[] 実行結果
    */
    dispatch(name, event) {
        if(!this.listeners[name]) {
            return [];
        }
        
        return this.$listeners[name].map(function(callback) {
            return callback(event);
        });
    }
}

/**
*   Repository
*/
class Marche.Repository {
    /**
    *   @var object
    */
    #storage;
    
    /**
    *   @var EventDispatcher
    */
    #eventDispatcher;
    
    /**
    *   constructor
    *
    *   @param EventDispatcher eventDispatcher
    */
    constructor(eventDispatcher) {
        this.#eventDispatcher = eventDispatcher;
        this.#storage = window.localstorage;
    }
    
    /**
    *   has
    *
    *   @param string name
    *   @return bool
    */
    has(name) {
       this.#storage.getItem(name) !== null; 
    }
    
    /**
    *   find
    *
    *   @param string name
    *   @return mixed
    */
    find(name) {
        if (!this.has(name)) {
            return null;
        }
        
        return JSON.parse(
            this.#storage.getItem(name)
        );
    }
    
    /**
    *   findAll
    *
    *   @return mixed[]
    */
    findAll() {
        let results = [];
        
        for (let i = 0; i < this.#storage.length; i++) {
            results.push(
                JSON.parse(
                    this.#storage.getItem(
                        this.#storage.key(i)
                    )
                )
            );
        }
        
        return results;
    }
    
    /**
    *   save
    *
    *   @param string name
    *   @param mixed value
    *   @return this
    */
    save(name, value) {
        this.#storage.getItem(
            name,
            JSON.stringify(value)
        );
        return this;
    }
    
    /**
    *   remove
    *
    *   @param string name
    *   @return this
    */
    remove(name) {
        this.#storage.removeItem(name);
        return this;
    }
    
    /**
    *   clear
    *
    *   @return this
    */
    clear() {
        this.#storage.clear();
        return this;
    }
}











})();

</script>

</body>
</html> 